odds_ratios <- exp(conf_ints) %*% matrix(c(30, 0, 0, 25), nrow = 2)
odds_ratios
conf_ints
odds_ratios <- exp(conf_ints %*% matrix(c(30, 0, 0, 25), nrow = 2))
odds_ratios
odds_ratios <- exp(t(conf_ints) %*% matrix(c(30, 0, 0, 25), nrow = 2))
odds_ratios
conf_ints
odds_ratios <- exp(t(conf_ints) %*% matrix(c(30, 30, 25, 25), nrow = 2))
odds_ratios
odds_ratios <- t(exp(t(conf_ints) %*% matrix(c(30, 30, 25, 25), nrow = 2)))
odds_ratios
matrix(c(30, 30, 25, 25), nrow = 2)
t(conf_ints)
t(conf_ints) %*% matrix(c(30, 30, 25, 25), nrow = 2)
(conf_ints) %*% matrix(c(30, 30, 25, 25), nrow = 2)
conf_ints
.0147*30
.135*30
t(conf_ints) %*% matrix(c(30, 0, 0, 25), nrow = 2)
.17*25
.037*25
odds_ratios <- t(exp(t(conf_ints) %*% matrix(c(30, 0, 0, 25), nrow = 2)))
odds_ratios
t(exp(t(conf_ints) %*% matrix(c(30, 0, 0, 25), nrow = 2)))
t(conf_ints) %*% matrix(c(30, 0, 0, 25), nrow = 2)
t(t(conf_ints) %*% matrix(c(30, 0, 0, 25), nrow = 2))
rownames(odds_ratios) <- rownames(conf_ints)
odds_ratios
x <- matrix(
c(30, 0,
0, 25),
nrow = 2)
odds_ratios <- t(exp(t(conf_ints) %*% x))
rownames(odds_ratios) <- rownames(conf_ints)
odds_ratios
knitr::kable(odds_ratios)
knitr::kable(odds_ratios, caption = "Bonferroni Adjusted Odds Ratios")
conf_ints
exp(conf_ints)
exp(.01479*30)
exp(0.13502607*30)
summary(q1.reg)
summary(q1.reg)[1]
summary(q1.reg) %>% names
summary(q1.reg)$cofficients
summary(q1.reg)$coefficients
names(summary(q1.reg)$coefficients)
names(summary(q1.reg)$coefficients)[1. ]
names(summary(q1.reg)$coefficients)[1, ]
typeof(summary(q1.reg)$coefficients)
names(summary(q1.reg)$coefficients)[1]
reg2 <- glm(
formula = flu_shot ~ age + awareness,
data = q1.df,
family = binomial(link = logit)
)
q1.reg
summary(q1.reg) %>% names
logLik(q1.reg)
exp(logLik(q1.reg))
like_F <- exp(logLik(q1.reg))
like_R <- exp(logLik(reg2))
G2 <- -2 * log (like_R / like_F)
G2
names(logLik(q1.reg))
logLik(q1.reg)[1]
like_F <- exp(logLik(q1.reg)[1])
like_R <- exp(logLik(reg2)[1])
G2 <- -2 * log (like_R / like_F)
chisq <- pchisq(G2, df = 1)
p <- pchisq(G2, df = 1)
rm(chisq)
reg3 <- glm(
formula = flu_shot ~ age + awareness + I(age**2) + I(awareness**2) + age:awareness,
data = q1.df,
family = binomial(link = logit)
)
reg3
summary(reg3)
reg2
like_F <- exp(logLik(reg3)[1])
like_R <- exp(logLik(reg2)[1])
G2 <- -2 * log (like_R / like_F)
p <- pchisq(G2, df = 1)
reg3
reg2
reg3$coefficients
leangth(reg3$coefficients)
length(reg3$coefficients)
length(reg3$coefficients) - length(reg2$coefficients)
knitr::include_graphics('./q2.png')
?step
```{r}
glm_full <- glm(
formula = flu_shot ~ age + awareness + as.factor(gender_m) + I(age**2) + I(awareness**2) + age:awareness,
data = q1.df,
family = binomial(link = logit)
)
step_aic <- step(glm_full, direction = 'both')
step_aic$model
step_aic$coefficients
nrow(q1.df)
step_aic <- step(glm_full, direction = 'both', k = log(nrow(q1.df)))
install.packages('stargazer')
?stargazer::stargazer
odds_ratios
odds_ratios['age', 1]
round(t(exp(t(conf_ints) %*% x)), 3)
round(t(exp(t(conf_ints) %*% x)), 1)
odds_ratios['awareness', 1]
odds_ratios['awareness', 2]
1-odds_ratios['awareness', 1]
1-odds_ratios['awareness', 2]
setwd('C:/users/zack/dropbox/classes/stat616/project')
setwd('C:/users/zack/dropbox/classes/stat616/project')
psid <- read_excel("data/glm data 3.29.xlsx")
library(plyr)
psid <- read_excel("data/glm data 3.29.xlsx")
library(readr)
psid <- read_excel("data/glm data 3.29.xlsx")
library(xlsx)
install.packages('xlsx')
library(xlsx)
psid <- read.xlsx2("data/glm data 3.29.xlsx", sheetIndex = 1)
psid=rename(psid, c("ER66001"="release", "ER66002"="familyid", "ER66017"="age","ER66018"="sex", "ER66021"="children",
"ER66024"="marital", "ER66025"="satisfaction","ER66031"="houseval","ER66170"="weekemploy",
"ER66722"="leisurehrs","ER67756"="tax", "ER68420"="health","ER70882"="race1","ER70883"="race2",
"ER70884"="race3", "ER70885"="race4","ER70941"="region", "ER70942"="denomination",
"ER71040"="religdonor", "ER71064"="attendnum","ER71065"="attendday","ER71164"="respondent",
"ER71330"="income","ER71426"="familyincome","ER71538"="education","ER71570"="weight"))
table(psid$marital)
table(psid$attendnum)
table(psid$attendday)
psid$region
table(psid$region)
cols_look <- colnames(psid)[4:26]
cols_look
cols_look <- colnames(psid)[6:26]
cols_look
?apply
apply(psid, MARGIN = c(1,2), FUN = function(x) as.character(x) %in% bad_vals)
bad_vals <- c('0', '9', '99', '98', '8')
f <- apply(psid, MARGIN = c(1,2), FUN = function(x) as.character(x) %in% bad_vals)
f
f <- apply(psid[, cols_look], MARGIN = c(1,2), FUN = function(x) as.character(x) %in% bad_vals)
f
View(psid)
cols_looks <- cols_look[!(cols_look %in% c('denomination', 'region'))]
bad_vals <- c('0', '9', '99', '98', '8')
f <- apply(psid[, cols_look], MARGIN = c(1,2), FUN = function(x) as.character(x) %in% bad_vals)
f
bad_vals <- c('9', '99', '98', '8')
f <- apply(psid[, cols_look], MARGIN = c(1,2), FUN = function(x) as.character(x) %in% bad_vals)
f
table(psid$respondent)
table(psid$attendday)
library(jsonlite)
codes_json <- read_json("data/codes.json")
codes_json$ER66017$values$Null
codes_json$ER66031$values$Null
codes_json$ER66031$values$Null[0]
codes_json$ER66031$values$Null['0']
codes_json$ER66031$values$Null['0'][1]
codes_json$ER66031$values$Null['0'][[1]]
psid <- read.xlsx2("data/glm data 3.29.xlsx", sheetIndex = 1)
psid <- read.xlsx2("data/glm data 3.29.xlsx", sheetIndex = 1)
colnames(psid)
codes_json[colnames(psid)]
codes_json[colnames(psid)]$type
is_categorical <- function(cols, dict){
is_cat <- sapply(cols, function(x) dict[cols]$type == "Categorical")
return(is_cat)
}
is_categorical(colnames(psid), codes_json)
is_categorical <- function(cols, dict){
is_cat <- sapply(cols, function(x) dict[cols]$type[1] == "Categorical")
return(is_cat)
}
is_categorical(colnames(psid), codes_json)
dict[colnames(psid)[1]]
codes_json[colnames(psid)[1]]
codes_json[colnames(psid)[1]]
codes_json[colnames(psid)[1]][[1]]
colnames(psid)[1]
as.character(colnames(psid)[1])
get_entry <- function(col, dict){
return(dict[col][[1]])
}
get <- function(col, dict){
return(dict[col][[1]])
}
get(colnames(psid[1]), codes_json)
is_categorical <- function(cols, dict){
is_cat <- sapply(cols, function(x) get(x, dict)$type == "Categorical")
return(is_cat)
}
is_categorical(colnames(psid), codes_json)
codes_json <- read_json("data/codes.json")
is_categorical(colnames(psid), codes_json)
is_categorical <- function(cols, dict){
is_cat <- sapply(cols, function(x) get(x, dict)$type == "Categorical")
return(as.boolean(is_cat))
}
is_categorical(colnames(psid), codes_json)
is_categorical <- function(cols, dict){
is_cat <- sapply(cols, function(x) get(x, dict)$type == "Categorical")
return(as.bool(is_cat))
}
is_categorical <- function(cols, dict){
is_cat <- sapply(cols, function(x) get(x, dict)$type == "Categorical")
return(as.logical(is_cat))
}
is_categorical(colnames(psid), codes_json)
cols <- colnames(psid)
cats <- cols(is_categorical(cols, codes_json))
cols <- colnames(psid)
is_categorical(cols, codes_json)
cols
cats <- cols(is_categorical(cols, codes_json))
columns <- colnames(psid)
cats <- columns(is_categorical(columns, codes_json))
cols <- colnames(psid)
cats <- cols[is_categorical(cols, codes_json)]
cats
rm(cats)
codes_json
codes_json$ER66017
codes_json$ER66018
codes_json$ER66018$values
codes_json$ER66018$values['1']
codes_json$ER66018$values['1'][1]
as.character(codes_json$ER66018$values['1'])
get_cat_val <- function(x, value_schema){
x <- as.character(x)
return(as.character(value_schema[x]))
}
categoricals[1]
categoricals[1]
#########
categoricals <- cols[is_categorical(cols, codes_json)]
categoricals[1]
psid[, categoricals[1]]
decode_vals <- function(df, colname, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
new_vals <- sapply(vals, function(x) get_cat_val(x, col_dict))
return(new_vals)
}
decode_vals(df = psid, colname = categoricals[1], dict = codes_json)
debugonce(get_cat_val)
decode_vals(df = psid, colname = categoricals[1], dict = codes_json)
value_schema
decode_vals <- function(df, colname, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
new_vals <- sapply(vals, function(x) get_cat_val(x, col_dict$values))
return(new_vals)
}
decode_vals(df = psid, colname = categoricals[1], dict = codes_json)
decode_vals(df = psid, colname = categoricals[4], dict = codes_json)
numerics <- cols[!is_categorical(cols, codes_json)]
is_numeric<- function(cols, dict){
is_num <- sapply(cols, function(x) get(x, dict)$type == "Numeric")
return(as.logical(is_num))
}
numerics <- cols[is_numeric(cols, codes_json)]
numerics
codes_json[numerics[1]]
codes_json[numerics[1]][[1]]
codes_json[numerics[1]][[1]]$values$Null
codes_json[numerics[1]][[1]]$values$Null[1]
length(codes_json[numerics[1]][[1]]$values$Null)
codes_json[numerics[2]][[1]]$values$Null
codes_json[numerics[3]][[1]]$values$Null
codes_json[numerics[2]][[1]]$values$Null["0"]
codes_json[numerics[3]][[1]]$values$Null["0"]
as.character(codes_json[numerics[3]][[1]]$values$Null["0"])
null_numeric <- function(x, null_schema){
if(length(null_schema) == 0){
return(x)
} else {
index_x <- as.character(x)
if(index_x %in% names(null_schema)){
return(as.character(null_schema[index_x]))
} else {
return(x)
}
}
}
null_numeric <- function(x, null_schema){
if(length(null_schema) == 0){
return(x)
} else {
index_x <- as.character(x)
if(index_x %in% names(null_schema)){
return(NA)
} else {
return(x)
}
}
}
clean_numeric <- function(df, colname, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
new_vals <- sapply(vals, function(x) null_numeric(x, col_dict$values$Null))
return(new_vals)
}
clean_numeric(psid, numerics[1], codes_json)
table(clean_numeric(psid, numerics[1], codes_json))
table(clean_numeric(psid, numerics[1], codes_json))
codes_json <- read_json("data/codes.json")
table(clean_numeric(psid, numerics[1], codes_json))
sum(is.na(clean_numeric(psid, numerics[1], codes_json)))
table(clean_numeric(psid, numerics[3], codes_json))
numerics[3]
sum(is.na(clean_numeric(psid, numerics[3], codes_json)))
library(stringr)
fix_numeric_comma <- function(x){
x <- as.character(x)
new_x <- str_replace(
string = x,
pattern = ",",
replacement = ""
)
return(as.numeric(new_x))
}
fix_numeric_comma(psid[, numerics[3]])
clean_numeric <- function(df, colname, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
cleaned_vals <- fix_numeric_comma(vals)
new_vals <- sapply(vals, function(x) null_numeric(x, col_dict$values$Null))
return(new_vals)
}
table(clean_numeric(psid, numerics[3], codes_json))
clean_numeric <- function(df, colname, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
cleaned_vals <- fix_numeric_comma(vals)
new_vals <- sapply(vals, function(x) null_numeric(x, col_dict$values$Null))
return(new_vals)
}
table(clean_numeric(psid, numerics[3], codes_json))
clean_numeric <- function(df, colname, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
cleaned_vals <- fix_numeric_comma(vals)
new_vals <- sapply(cleaned_vals, function(x) null_numeric(x, col_dict$values$Null))
return(new_vals)
}
table(clean_numeric(psid, numerics[3], codes_json))
plot(density(clean_numeric(psid, numerics[3], codes_json)))
sum(is.na(clean_numeric(psid, numerics[3], codes_json)))
hist(clean_numeric(psid, numerics[3], codes_json))
summary(clean_numeric(psid, numerics[3], codes_json))
summary(clean_numeric(psid, numerics[4], codes_json))
summary(clean_numeric(psid, numerics[5], codes_json))
summary(clean_numeric(psid, numerics[6], codes_json))
summary(clean_numeric(psid, numerics[7], codes_json))
get_col_names <- function(cols, dict){
names <- sapply(cols, function(x) get(x, dict)$name)
return(as.character(names))
}
get_col_names <- function(df, dict){
names <- colnames(df)
new_names <- sapply(names, function(x) get(x, dict)$name)
return(as.character(new_names))
}
get_col_names(psid, codes_json)
codes_json <- read_json("data/codes.json")
get_col_names(psid, codes_json)
decode_vals <- function(colname, df, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
new_vals <- sapply(vals, function(x) get_cat_val(x, col_dict$values))
return(new_vals)
}
clean_numeric <- function(colname, df, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
cleaned_vals <- fix_numeric_comma(vals)
new_vals <- sapply(cleaned_vals, function(x) null_numeric(x, col_dict$values$Null))
return(new_vals)
}
clean_df <- function(df, dict){
cols <- colnames(df)
categoricals <- cols[is_categorical(cols, dict)]
numerics <- cols[is_numeric(cols, dict)]
df[, categoricals] <- sapply(
categoricals,
decode_vals,
df,
dict
)
df[, numerics] <- sapply(
numerics,
clean_numeric,
df,
dict
)
colnames(df) <- get_col_names(df, dict)
return(df)
}
clean_df(psid, codes_json)
write.csv(clean_df, "cleaned_df.csv")
write.csv(clean_df, "data/cleaned_df.csv")
rm(list  =ls())
##### Utility functions
# Return the metadata for a given column
get <- function(col, dict){
return(dict[col][[1]])
}
# Retrieve the decoded column name
get_col_names <- function(df, dict){
names <- colnames(df)
new_names <- sapply(names, function(x) get(x, dict)$name)
return(as.character(new_names))
}
# Determine if the column is categorical from metadata
is_categorical <- function(cols, dict){
is_cat <- sapply(cols, function(x) get(x, dict)$type == "Categorical")
return(as.logical(is_cat))
}
# Determine if the column is numeric from metadata
is_numeric<- function(cols, dict){
is_num <- sapply(cols, function(x) get(x, dict)$type == "Numeric")
return(as.logical(is_num))
}
# Translate the default value to the decoded value for a categorical variable
get_cat_val <- function(x, value_schema){
x <- as.character(x)
return(as.character(value_schema[x]))
}
# Translate the default value to the decoded value for all categorical variables
decode_vals <- function(colname, df, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
new_vals <- sapply(vals, function(x) get_cat_val(x, col_dict$values))
return(new_vals)
}
# Remove commmas from numeric variables, e.g. 9,000 -> 9000
fix_numeric_comma <- function(x){
x <- as.character(x)
new_x <- str_replace(
string = x,
pattern = ",",
replacement = ""
)
return(as.numeric(new_x))
}
# Return null values for numeric values as determined by metadata
null_numeric <- function(x, null_schema){
if(length(null_schema) == 0){
return(x)
} else {
index_x <- as.character(x)
if(index_x %in% names(null_schema)){
return(NA)
} else {
return(x)
}
}
}
# Remove commmas from numeric variables, e.g. 9,000 -> 9000
# Return null values for numeric values as determined by metadata
clean_numeric <- function(colname, df, dict){
vals <- df[, colname]
col_dict <- get(colname, dict)
cleaned_vals <- fix_numeric_comma(vals)
new_vals <- sapply(cleaned_vals, function(x) null_numeric(x, col_dict$values$Null))
return(new_vals)
}
# Cleans whole dataframe
# 1. Translate the default value to the decoded value for all categorical variables
# 2. Remove commmas from numeric variables, e.g. 9,000 -> 9000
# 3. Return null values for numeric values as determined by metadata
# 4. Decodes column names
clean_df <- function(df, dict){
cols <- colnames(df)
categoricals <- cols[is_categorical(cols, dict)]
numerics <- cols[is_numeric(cols, dict)]
df[, categoricals] <- sapply(
categoricals,
decode_vals,
df,
dict
)
df[, numerics] <- sapply(
numerics,
clean_numeric,
df,
dict
)
colnames(df) <- get_col_names(df, dict)
return(df)
}
#########
library(jsonlite)
library(xlsx)
library(stringr)
codes_json <- read_json("data/codes.json")
psid <- read.xlsx2("data/glm data 3.29.xlsx", sheetIndex = 1)
psid_clean <- clean_df(psid, codes_json)
write.csv(psid_clean, "data/cleaned_df.csv")
write.csv(psid_clean, "data/cleaned_data.csv")
table(psid_clean$religious_attend_nb)
sum(is.na((psid_clean$religious_attend_nb)))
table(psid_clean$religious_attend_freq)
table(psid_clean$taxable_income)
sum(is.na(psid_clean$taxable_income))
sum(is.na(psid_clean$house_val))
